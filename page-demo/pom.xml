<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.learn</groupId>
	<artifactId>page-demo</artifactId>
	<packaging>war</packaging>
	<version>1.0</version>
	<name>page-demo</name>
	<url>http://maven.apache.org</url>
	<dependencies>
		<dependency>
			<!-- 使用junit4 -->
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.11</version>
			<scope>test</scope>
		</dependency>
	</dependencies>
	<build>
		<finalName>page-demo</finalName>
		<plugins>
			<!-- maven测试用例插件 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<skipTests>true</skipTests><!-- 跳过测试用例 -->
				</configuration>
			</plugin>
			<!-- maven编译源码插件 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.2</version>
				<configuration>
					<!-- 一般而言，target与source是保持一致的，但是，有时候为了让程序能在其他版本的jdk中运行(对于低版本目标jdk，源代码中需要没有使用低版本jdk中不支持的语法)，会存在target不同于source的情况 -->
					<source>1.7</source><!-- 源代码使用的开发版本 -->
					<target>1.7</target><!-- 需要生成的目标class文件的编译版本 -->
					<encoding>UTF-8</encoding>
					<includes>
						<include>**/*.*</include>
					</includes>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>
